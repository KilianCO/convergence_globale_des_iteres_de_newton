{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "inclusive-jacket",
   "metadata": {},
   "source": [
    "# Kilian COLLET - Compte rendu TP"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "herbal-tutorial",
   "metadata": {},
   "source": [
    "#  Partie 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "athletic-promotion",
   "metadata": {},
   "source": [
    "## Question 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "prepared-joseph",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created file '/home/kilian.collet/MATLAB/newton.m'.\n"
     ]
    }
   ],
   "source": [
    "%%file newton.m\n",
    "function [x]=newton(x0,f,f1,eps)\n",
    "y=x0;\n",
    "\n",
    "for k=1:1000\n",
    "   %% Trouver le point x1\n",
    "    x1 = y - f(y)/f1(y);\n",
    "\n",
    "if abs(f1(y)) <= 10^-14        %% Test de dérivée nulle\n",
    "    warning('Nous divisons par 0')\n",
    "    x=NaN\n",
    "    break\n",
    "    end\n",
    "\n",
    "    %% Réussite\n",
    "if abs(f(x1)) <= 10^-14 %% On met 10^-14 pour des raisons pratiques\n",
    "    x=x1;\n",
    "    break\n",
    "\n",
    "else\n",
    "%Test d'arrêt\n",
    "if abs(x1-x0) <= eps break \n",
    "end\n",
    "\n",
    "y=x1;\n",
    "end\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "intended-record",
   "metadata": {},
   "source": [
    "Ici on appelle f1 la dérivée de la fonction f\n",
    "\n",
    "On laisse epsilon en paramètre mais on le fixera ultérieurement à 10^-8"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "moral-appliance",
   "metadata": {},
   "source": [
    "## Question 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "close-upper",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "P1 =\n",
      "\n",
      "  function_handle with value:\n",
      "\n",
      "    @(x)x^3-6*x^2+11*x-6\n",
      "\n",
      "\n",
      "p1 =\n",
      "\n",
      "  function_handle with value:\n",
      "\n",
      "    @(x)3*x^2-12*x+11\n",
      "\n",
      "Warning: Function behaves unexpectedly on array inputs. To improve performance, properly vectorize your function to return an output with the same size and shape as the input arguments.\n",
      "> In matlab.graphics.function.FunctionLine>getFunction\n",
      "  In matlab.graphics.function.FunctionLine/updateFunction\n",
      "  In matlab.graphics.function.FunctionLine/set.Function_I\n",
      "  In matlab.graphics.function.FunctionLine/set.Function\n",
      "  In matlab.graphics.function.FunctionLine\n",
      "  In fplot>singleFplot (line 234)\n",
      "  In fplot>@(f)singleFplot(cax,{f},limits,extraOpts,args) (line 193)\n",
      "  In fplot>vectorizeFplot (line 193)\n",
      "  In fplot (line 163)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "P1=@(x) x^3-6*x^2+11*x-6  %% On définit P1 notre fonction\n",
    "p1=@(x) 3*x^2-12*x+11     %% On définit p1 la dérivée de P1\n",
    "fplot(P1,[-1 5])          %% On dessine la fonction sur [-1 ; 5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "outstanding-breed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " \n",
      "ans =\n",
      " \n",
      " 1\n",
      " 2\n",
      " 3\n",
      " \n"
     ]
    }
   ],
   "source": [
    "solve(P1) %% Résolution de P1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "minute-template",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%% Bassins d'attractions de P1 :\n",
    "grille=-1:0.05:5;         %% Création de notre grille, choix de notre pas\n",
    "tab=-1:0.05:5;            %% Création du tableau de même taille\n",
    "for i=1:length(grille)    %% On remplit chaque case i du tableau avec la valeur d'arrivée de newton(grille(i))\n",
    "        tab(i) = newton(grille(i),P1,p1,10^-8);\n",
    "end\n",
    "\n",
    "f=figure();            \n",
    "plot(grille,tab,'.');   %% Dessin avec grille en abscisse et tab"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "impaired-element",
   "metadata": {},
   "source": [
    "Remarque :\n",
    "\n",
    "Nous avons précisé **'.'** dans notre fonction *plot* afin d'enlever les barres verticales non pertinentes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "english-authentication",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "P2 =\n",
      "\n",
      "  function_handle with value:\n",
      "\n",
      "    @(x)x^2-1\n",
      "\n",
      "\n",
      "p2 =\n",
      "\n",
      "  function_handle with value:\n",
      "\n",
      "    @(x)2*x\n",
      "\n",
      "Warning: Function behaves unexpectedly on array inputs. To improve performance, properly vectorize your function to return an output with the same size and shape as the input arguments.\n",
      "> In matlab.graphics.function.FunctionLine>getFunction\n",
      "  In matlab.graphics.function.FunctionLine/updateFunction\n",
      "  In matlab.graphics.function.FunctionLine/set.Function_I\n",
      "  In matlab.graphics.function.FunctionLine/set.Function\n",
      "  In matlab.graphics.function.FunctionLine\n",
      "  In fplot>singleFplot (line 234)\n",
      "  In fplot>@(f)singleFplot(cax,{f},limits,extraOpts,args) (line 193)\n",
      "  In fplot>vectorizeFplot (line 193)\n",
      "  In fplot (line 163)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "P2=@(x) x^2-1          %% On définit P2 notre fonction\n",
    "p2=@(x) 2*x            %% On définit p2 la dérivée de P2\n",
    "fplot(P2,[-1 3])       %% On dessine la fonction sur [-1 ; 3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "hydraulic-twelve",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " \n",
      "ans =\n",
      " \n",
      " -1\n",
      "  1\n",
      " \n"
     ]
    }
   ],
   "source": [
    "solve(P2)     %% Résolution de P2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "selective-integer",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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Vt56ctGiRS0tLVM6DiCSsX8QH/0Deljl95ZdNpudN29eX19f8W4+nx8aGvKd3wDlrvyClCTJ5s2b29rairfb2trWrFlTU1OT7iQAJqn83rJLkmTbtm1vvvnmU089NWvWrIGBgX379qW9CIDJKssgVVRU7N2799y5c4ODg4sXL057DgAlUJZBKpo/f37aEwAombL8GhIA9x9BAiAEQQIgBEECIARBAiAEQQIgBEECIARBAiAEQQIgBEECIARBAiAEQQIgBEECIARBAiAEQQIgBEECIARBAiAEQQIgBEECIARBAiAEQQIgBEECIARBAiAEQQIgBEECIARBAiAEQQIgBEECIARBAiAEQQIgBEECIARBAiAEQQIgBEECIARBAiAEQQIgBEECIARBAiAEQQIgBEECIARBAiAEQQIgBEECIARBAiAEQQIghOlpD7hZPp/fv3//4ODgpk2blixZctszfX19J06cGL1bV1e3ePHiqRoIwD0R6xVST0/P008/XVtb+/jjj+/YseP111+/7bHu7u7m5uaf/dHp06eneCcAJRfrFVJra+uGDRu2bt2aJMnMmTNfeuml1atX3/ZkdXV1a2vr1K4D4B4K9AqpUCgcOnRo5cqVxbtr167t7e3t6upKdxUAUyNQkK5cuTI0NFRVVVW8m8lkKisr8/n8bQ9funRp+/btu3bt6unpmcKNANwr6bxlVygUjh49OvaR2traYormzp07+mAmkxkaGrr1pzc2Nh45cuTMmTMdHR0bN248ePBgXV3drcdyuVxTU9Por9/c3FzKfwaA8Hbv3n3+/Pni7Vwul+6YCaUTpJGRkfb29rGPNDY2btq0KUmSvr6++vr64oPXrl2rrKy89adns9lsNtvQ0NDQ0NDd3d3e3n7b2CxatKilpeUezAcoD2OfG0f/gB5WOkHKZDK3/ZaEefPm9fX1FW/n8/mhoaHxvvN7VE1NzYULF0o/EYCpFehrSEmSbN68ua2trXi7ra1tzZo1NTU1xbvt7e179uy56fzFixePHTu2dOnSKV0JwD0Q69u+t23b9uabbz711FOzZs0aGBjYt2/f6A8dPny4q6vr+eefT5Kko6PjwIEDc+bM6ezsXLdu3TPPPJPeZABKI1aQKioq9u7de+7cucHBwZs+fGHsW3zr169fsGBBf39/S0tLNpud8pkAlF6sIBXNnz//zgcq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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%% Bassins d'attractions de P2 :\n",
    "grille=-1:0.03:3;         %% Création de notre grille, choix de notre pas\n",
    "tab=-1:0.03:3;            %% Création du tableau de même taille\n",
    "for i=1:length(grille)    %% On remplit chaque case i du tableau avec la valeur d'arrivée de newton(grille(i))\n",
    "        tab(i) = newton(grille(i),P2,p2,10^-8);\n",
    "end\n",
    "\n",
    "f=figure();            \n",
    "plot(grille,tab,'.');   %% Dessin avec grille en abscisse et tab en ordonnée"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "headed-handling",
   "metadata": {},
   "source": [
    "Remarque :\n",
    "\n",
    "Comme précédemment, nous utilisons **'.'** afin d'éviter une barre veritcale\n",
    "\n",
    "De plus nous prenons 0.03 comme pas afin de pas arriver au point 0 qui a une dérivée nulle et fait planter l'algorithme"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "conditional-scholarship",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "P3 =\n",
      "\n",
      "  function_handle with value:\n",
      "\n",
      "    @(x)x^3-6*x^2+9*x\n",
      "\n",
      "\n",
      "p3 =\n",
      "\n",
      "  function_handle with value:\n",
      "\n",
      "    @(x)3*x^2-12*x+9\n",
      "\n",
      "Warning: Function behaves unexpectedly on array inputs. To improve performance, properly vectorize your function to return an output with the same size and shape as the input arguments.\n",
      "> In matlab.graphics.function.FunctionLine>getFunction\n",
      "  In matlab.graphics.function.FunctionLine/updateFunction\n",
      "  In matlab.graphics.function.FunctionLine/set.Function_I\n",
      "  In matlab.graphics.function.FunctionLine/set.Function\n",
      "  In matlab.graphics.function.FunctionLine\n",
      "  In fplot>singleFplot (line 234)\n",
      "  In fplot>@(f)singleFplot(cax,{f},limits,extraOpts,args) (line 193)\n",
      "  In fplot>vectorizeFplot (line 193)\n",
      "  In fplot (line 163)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "P3=@(x) x^3-6*x^2+9*x        %% On définit P3\n",
    "p3=@(x) 3*x^2-12*x+9         %% On définit p3 la dérivée de P3\n",
    "fplot(P3,[-2 5])             %% On trace P3 sur [-2 ; 5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "current-gates",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " \n",
      "ans =\n",
      " \n",
      " 0\n",
      " 3\n",
      " 3\n",
      " \n"
     ]
    }
   ],
   "source": [
    "solve(P3)        %% Résolution de P3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "theoretical-honolulu",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: Nous divisons par 0\n",
      "> In newton (line 9)\n",
      "\n",
      "x =\n",
      "\n",
      "   NaN\n",
      "\n",
      "Warning: Nous divisons par 0\n",
      "> In newton (line 9)\n",
      "\n",
      "x =\n",
      "\n",
      "   NaN\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%% Bassins d'attractions de P3 :\n",
    "grille=-2:0.05:5;         %% Création de notre grille, choix de notre pas\n",
    "tab=-2:0.05:5;            %% Création du tableau de même taille\n",
    "for i=1:length(grille)    %% On remplit chaque case i du tableau avec la valeur d'arrivée de newton(grille(i))\n",
    "        tab(i) = newton(grille(i),P3,p3,10^-8);\n",
    "end\n",
    "\n",
    "f=figure();            \n",
    "plot(grille,tab,'.');   %% Dessin avec grille en abscisse et tab en ordonnée"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "measured-trance",
   "metadata": {},
   "source": [
    "Remarque :\n",
    "\n",
    "Nous avons eu deux avertissements de dérivée nulle"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "narrative-malta",
   "metadata": {},
   "source": [
    "## Question 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "renewable-queen",
   "metadata": {},
   "source": [
    "Ces résultats étaient prévisibles en analysant visuellement la fonction et sa dérivée.\n",
    "\n",
    "Par exemple, pour la fonction **P2** il est clair que sur l'invervalle de départ [-1 ; 0], l'intersection itérée entre la tangente et l'axe des abscisses converge vers le point de coordonnées [-1 ; 0]\n",
    "\n",
    "De même sur l'intervalle [0 ; 3] vers le point [1, 0]\n",
    "\n",
    "\n",
    "Pour la fonction **P3**, le même raisonnement nous amène d'une part vers le point [1,0] si l'on part de la première moitié du graphe ou [3,0] si l'on part de la seconde moitié du graphe.\n",
    "\n",
    "\n",
    "\n",
    "En revanche, pour la fonction **P1** l'analyse est moins évidente :\n",
    "\n",
    "On peut deviner de la même manière que précédemment les bornes \"extrêmes\" de notre basse d'attraction, c'est-à-dire les intervalles [-1 ; 1.5] et [2.5 ; 5] mais il est peu probable de voir la partie \"interne\" de notre bassin d'attraction à l'oeil."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "stable-adventure",
   "metadata": {},
   "source": [
    "#  Partie 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eastern-twins",
   "metadata": {},
   "source": [
    "## Question 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "neural-jamaica",
   "metadata": {},
   "source": [
    "\\begin{cases}\n",
    "x^3-3xy^2-1  &=0 \\\\\n",
    "3x^2y - y^3 &=0\n",
    "\\end{cases} \\\n",
    "\\begin{aligned} \\Leftrightarrow \\end{aligned} \\\n",
    "\\begin{cases}\n",
    "x^3-3xy^2-1  &=0 \\\\\n",
    "y(3x^2-y^2) &=0\n",
    "\\end{cases}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "broad-single",
   "metadata": {},
   "source": [
    "Si y = 0 :\\\n",
    "La première ligne devient \\\n",
    "\\begin{equation}x^3-1=0 \\\\\n",
    "\\Leftrightarrow \\\\\n",
    "x=1\\end{equation}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "anonymous-explorer",
   "metadata": {},
   "source": [
    "Si y != 0 :\\\n",
    "On peut modifier la deuxième ligne de notre système initial en la simplifiant par y : \\\n",
    "\\begin{cases}\n",
    "x^3-3xy^2-1  &=0 \\\\\n",
    "3x^2-y^2 &=0\n",
    "\\end{cases} \\\n",
    "\\begin{aligned} \\Leftrightarrow \\end{aligned} \\\n",
    "\\begin{cases}\n",
    "x^3-3xy^2-1  &= 0 \\\\\n",
    "y^2 &= 3x^2\n",
    "\\end{cases} \\\n",
    "\\begin{aligned} \\Leftrightarrow \\end{aligned} \\\n",
    "\\begin{cases}\n",
    "-8x^3-1  &= 0 \\\\\n",
    "y^2 &= 3x^2\n",
    "\\end{cases} \\\n",
    "\\begin{aligned} \\Leftrightarrow \\end{aligned} \\\n",
    "\\begin{cases}\n",
    "x &= -1/2 \\\\\n",
    "y^2 &= 3/4\n",
    "\\end{cases} "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dental-cameroon",
   "metadata": {},
   "source": [
    "Nous avons donc : \\\n",
    "\\begin{equation}\n",
    "S1 = (1,0) \\\\\n",
    "S2 = (-1/2 , \\sqrt(3)/2) \\\\\n",
    "S3 = (-1/2 , - \\sqrt(3)/2)\n",
    "\\end{equation} \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "compliant-villa",
   "metadata": {},
   "source": [
    "## Question 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "alpha-borough",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created file '/home/kilian.collet/MATLAB/newton2d.m'.\n"
     ]
    }
   ],
   "source": [
    "%%file newton2d.m\n",
    "function [x]=newton2d(x0,f,f1,eps)\n",
    "y=x0;\n",
    "\n",
    "for k=1:1000\n",
    "    %% On vérifie que la Jacobienne est non nulle\n",
    "    if det(f1)<= 10^(-14)\n",
    "        warning('Le déterminant est nul')\n",
    "        x = [NaN;NaN];\n",
    "        break;\n",
    "        end\n",
    "        \n",
    "   %%Trouver le point X1\n",
    "    x1 = y - f1(y(1),y(2))\\f(y(1),y(2));\n",
    "\n",
    "    %%Condition de réussite\n",
    "    if abs(f(x1(1),x1(2))) <= [10^(-14);10^(-14)]\n",
    "        x=x1;\n",
    "        break\n",
    "    else\n",
    "        %Condition d'arrêt\n",
    "        if abs(x1-x0) <= eps break \n",
    "        end\n",
    "\n",
    "    y=x1;\n",
    "end\n",
    "\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "collected-clearance",
   "metadata": {},
   "source": [
    "## Question 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "injured-moldova",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "f =\n",
      "\n",
      "  function_handle with value:\n",
      "\n",
      "    @(x)[x(1)^3-3*x(1)*x(2)^2-1;3*x(1)^2*x(2)-x(2)^3]\n",
      "\n",
      "\n",
      "f1 =\n",
      "\n",
      "  function_handle with value:\n",
      "\n",
      "    @(x)[3*x(1)^2-3*x(2)^2,-6*x(1)*x(2);6*x(1)*x(2),3*x(1)^2-3*x(2)^2]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "%% Déclaration de notre polynome sous forme matricielle\n",
    "f=@(x) [x(1)^3-3*x(1)*x(2)^2-1 ; 3*x(1)^2*x(2)-x(2)^3]\n",
    "\n",
    "%% Déclaration de sa matrice Jacobienne\n",
    "f1=@(x) [3*x(1)^2-3*x(2)^2 , -6*x(1)*x(2)   ;   6*x(1)*x(2) , 3*x(1)^2-3*x(2)^2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "upset-guess",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[0;31mUndefined function 'det' for input arguments of type 'function_handle'.\n",
      "\n",
      "Error in newton2d (line 6)\n",
      "    if det(f1)<= 10^(-14)\n",
      "\n",
      "\u001b[0m"
     ]
    }
   ],
   "source": [
    "%% Bassins d attraction :\n",
    "scale=-1:0.1:1;  %% Création de l'échelle\n",
    "tscale=transpose(scale);\n",
    "long=length(scale);\n",
    "grille=scale.*tscale;  %% Création de la grille\n",
    "\n",
    "\n",
    "%% Définition des solutions\n",
    "s1=[1;0];\n",
    "s2=[-1/2;sqrt(3)/2];\n",
    "s3=[-1/2;-sqrt(3)/2];\n",
    "\n",
    "\n",
    "%% Affectation des valeurs 0, 1 ou 2 lorsque l'on converge vers s1, s2 ou s3 respectivement\n",
    "for i=1:long\n",
    "    for j=1:long\n",
    "        if norm(newton2d(grille(i,j),f,f1,10^-12)-s1) <= 10^-8\n",
    "            grille(i,j)=0;\n",
    "        elseif norm(newton2d(grille(i,j),f,f1,10^-12)-s2) <= 10^-8\n",
    "            grille(i,j)=1;\n",
    "        elseif norm(newton2d(grille(i,j),f,f1,10^-12)-s3) <= 10^-8\n",
    "            grille(i,j)=2;\n",
    "        end\n",
    "    end\n",
    "end\n",
    "\n",
    "\n",
    "%% Affichage\n",
    "f=figure();            \n",
    "image(grille);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "suited-calgary",
   "metadata": {},
   "source": [
    "## Question 4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "norman-philosophy",
   "metadata": {},
   "source": [
    "Au vu des difficultés éprouvées lors de la réalisation de ce TP, il ne semble pas facile de construire d'autres fonction ayant ce type de comportement.\n",
    "\n",
    "Il serait cependant intéressant de tester d'autres polynomes de divers degrés avec la fonction newton2d et de regarder leur comportement."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Matlab",
   "language": "matlab",
   "name": "matlab"
  },
  "language_info": {
   "codemirror_mode": "octave",
   "file_extension": ".m",
   "help_links": [
    {
     "text": "MetaKernel Magics",
     "url": "https://metakernel.readthedocs.io/en/latest/source/README.html"
    }
   ],
   "mimetype": "text/x-octave",
   "name": "matlab",
   "version": "0.16.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
